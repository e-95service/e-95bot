import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_SERVICE, CAR_DETAILS, PROBLEM_DESCRIPTION, CONTACT_INFO, CONFIRM_BOOKING = range(5)

# –î–∞–Ω–Ω—ã–µ –°–¢–û
STO_NAME = "–°–¢–û –ï95"
STO_ADDRESS = "–û–¥–µ—Å—Å–∞, –î–∞–ª—å–Ω–∏—Ü–∫–æ–µ —à–æ—Å—Å–µ, 16"
STO_PHONE = "0672949352"
WORKING_HOURS = "–ü–Ω-–ü—Ç 9:00-19:00, –°–± 10:00-15:00"


# –°—Ç–∞—Ä—Ç / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üõ† –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    user = update.effective_user
    await update.message.reply_html(
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {STO_NAME}, {user.first_name}!</b>\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )


# –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –Ω–∞—á–∞–ª–æ
async def start_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º:\n\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ?\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?\n"
        "‚Ä¢ –ö–∞–∫–∞—è –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ?",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROBLEM_DESCRIPTION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async def process_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    problem = update.message.text
    context.user_data['problem'] = problem

    await update.message.reply_html(
        f"–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! –ù–∞—à –º–µ—Ö–∞–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        f"<b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>\n{problem}\n\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?",
        reply_markup=ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True)
    )
    return CONFIRM_BOOKING


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è: –∑–∞–ø–∏—Å—å –∏–ª–∏ –Ω–µ—Ç
async def process_booking_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    decision = update.message.text
    if decision == "‚úÖ –î–∞":
        return await start_booking(update, context)
    elif decision == "‚ùå –ù–µ—Ç":
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å¬ª.",
            reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
        )
        return ConversationHandler.END


# –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services = [
        ["üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
        ["üõ† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "üöó –†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è"],
        ["üî© –•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å", "‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–∏–∫–∞"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        reply_markup=ReplyKeyboardMarkup(services, resize_keyboard=True)
    )
    return SELECT_SERVICE


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
async def select_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['service'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n‚Ä¢ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å\n‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n‚Ä¢ –ü—Ä–æ–±–µ–≥",
        reply_markup=ReplyKeyboardRemove()
    )
    return CAR_DETAILS


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ
async def car_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['car_info'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚Ä¢ –ò–º—è\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —Å–≤—è–∑–∏"
    )
    return CONTACT_INFO


# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text
    context.user_data['contact'] = contact

    summary = (
        f"<b>–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {context.user_data['service']}\n"
        f"<b>–ê–≤—Ç–æ:</b> {context.user_data['car_info']}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {STO_ADDRESS}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {STO_PHONE}\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
    )

    await update.message.reply_html(
        summary,
        reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {context.user_data}")
    return ConversationHandler.END


# –û –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        f"<b>{STO_NAME}</b>\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {STO_ADDRESS}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {STO_PHONE}\n"
        f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {WORKING_HOURS}\n\n"
        "<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¢–û\n"
        "‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –ø–æ–¥–≤–µ—Å–∫–∞\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–µ–π"
    )


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    )
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^üõ† –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è$"), start_consultation),
            MessageHandler(filters.Regex(r"^üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å$"), start_booking)
        ],
        states={
            PROBLEM_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_problem)],
            CONFIRM_BOOKING: [MessageHandler(filters.Regex(r"^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$"), process_booking_decision)],
            SELECT_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_service)],
            CAR_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, car_details)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact_info)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    # –ö–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex(r"^üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã$"), about))
    application.add_handler(MessageHandler(filters.Regex(r"^‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏$"), about))
    application.add_handler(MessageHandler(filters.Regex(r"^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), start))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()


if __name__ == "__main__":
    main()